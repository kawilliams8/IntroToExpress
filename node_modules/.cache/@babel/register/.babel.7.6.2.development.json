{
  "{\"sourceRoot\":\"/Users/katherin/Desktop/Turing-Projects/pet-box\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/katherin/Desktop/Turing-Projects/pet-box\",\"filename\":\"/Users/katherin/Desktop/Turing-Projects/pet-box/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/katherin/Desktop/Turing-Projects/pet-box\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.6.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/katherin/Desktop/Turing-Projects/pet-box",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/katherin/Desktop/Turing-Projects/pet-box",
      "filename": "/Users/katherin/Desktop/Turing-Projects/pet-box/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/katherin/Desktop/Turing-Projects/pet-box",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/katherin/Desktop/Turing-Projects/pet-box/server.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/katherin/Desktop/Turing-Projects/pet-box/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/katherin/Desktop/Turing-Projects/pet-box",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This node version is what dictates that this need 'require' syntax, as opposed to import/export via Babel\nvar app = (0, _express[\"default\"])();\napp.set('port', process.env.PORT || 3000); //Sets the port variable to be used later\n\napp.locals.title = 'Pet Box'; // Just giving a title to the app\n\napp.locals.pets = [//Storing data in local variables, but not good for production code!\n{\n  id: 1,\n  name: 'Buttermilk',\n  type: 'dog'\n}, {\n  id: 2,\n  name: 'Uno',\n  type: 'cat'\n}, {\n  id: 3,\n  name: 'Spaghetti',\n  type: 'snake'\n}, {\n  id: 4,\n  name: 'Mort',\n  type: 'moss ball'\n}];\napp.use(_express[\"default\"].json()); //Necessary for POSTing!!\n\napp.get('/', function (request, response) {\n  return response.send('Oh! Hey there Pet Box...!');\n});\napp.get('/api/v1/pets', function (request, response) {\n  var pets = app.locals.pets;\n  return response.status(200).json({\n    pets: pets\n  }); //Sends a stringified version and the 200 to the requesting client\n});\napp.get('/api/v1/pets/:id', function (request, response) {\n  // return response.send({ // just getting/returning the string from the incoming request\n  // id: request.params.id\n  // }); \n  var id = parseInt(request.params.id);\n  var pets = app.locals.pets;\n  var pet = pets.find(function (pet) {\n    return pet.id === id;\n  });\n\n  if (pet) {\n    return response.status(200).json({\n      pet: pet\n    }); //Personal preference to add this object literal w/key of pet or not\n  } else {\n    return response.status(404).json({\n      error: 'Pet not found'\n    });\n  }\n});\napp.post('/api/v1/pets', function (request, response) {\n  //Same API to post as to get all pets, duplicated by design!!\n  // Get the info for the new pet from the request\n  var pets = app.locals.pets;\n  var newPet = request.body; // Make a newPet object w/id, name, type\n\n  var newPetWithId = _objectSpread({\n    id: Date.now()\n  }, newPet); // if I have a new pet, push it into the existing array\n  // if there is no new pet, return some sort of error\n\n\n  app.locals.pets = [].concat(_toConsumableArray(pets), [newPetWithId]);\n\n  if (newPet) {\n    //Checking for the incoming pet, because newPetWithId will always be an object\n    return response.status(201).json({\n      id: newPetWithId.id\n    });\n  } else {\n    return response.status(422).json('Could not parse pet'); //422 = \"unprocessable entity\"\n  } // return status code, maybe all the pets too\n\n}); //update a pet's info\n//app.put\n//receive the updated info\n//look for the matching id's object\n//overwrite the old object info by key\n//use conditional to see what status code to return w/message\n\napp.put('/api/v1/pets/:id', function (request, response) {\n  var pets = app.locals.pets;\n  var id = parseInt(request.params.id);\n  var petToUpdate = pets.find(function (pet) {\n    return pet.id === id;\n  });\n  petToUpdate.name = request.body.name;\n  var updatedPets = pets.map(function (pet) {\n    return pet.id === id ? petToUpdate : pet;\n  });\n\n  if (petToUpdate) {\n    return response.status(202).json({\n      pets: updatedPets\n    });\n  } else {\n    return response.status(422).json(\"Could not update pet\");\n  }\n});\napp[\"delete\"]('/api/v1/pets/:id', function (request, response) {\n  var pets = app.locals.pets;\n  var id = parseInt(request.params.id);\n  var remainingPets = pets.filter(function (pet) {\n    return pet.id !== id;\n  });\n  app.locals.pets = remainingPets;\n\n  if (remainingPets) {\n    return response.status(200).json({\n      pets: remainingPets\n    });\n  } else {\n    return response.status(422).json(\"Could not delete that pet\");\n  }\n});\napp.listen(app.get('port'), function () {\n  console.log(\"\".concat(app.locals.title, \" is running on PORT \").concat(app.get('port')));\n}); // App.listen is a method coming from express\n// It means the server will be listening for HTTP calls on that port\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJzZXQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsImxvY2FscyIsInRpdGxlIiwicGV0cyIsImlkIiwibmFtZSIsInR5cGUiLCJ1c2UiLCJleHByZXNzIiwianNvbiIsImdldCIsInJlcXVlc3QiLCJyZXNwb25zZSIsInNlbmQiLCJzdGF0dXMiLCJwYXJzZUludCIsInBhcmFtcyIsInBldCIsImZpbmQiLCJlcnJvciIsInBvc3QiLCJuZXdQZXQiLCJib2R5IiwibmV3UGV0V2l0aElkIiwiRGF0ZSIsIm5vdyIsInB1dCIsInBldFRvVXBkYXRlIiwidXBkYXRlZFBldHMiLCJtYXAiLCJyZW1haW5pbmdQZXRzIiwiZmlsdGVyIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQSxJQUFNQSxHQUFHLEdBQUcsMEJBQVo7QUFFQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEsTUFBUixFQUFnQkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQVosSUFBb0IsSUFBcEMsRSxDQUEyQzs7QUFDM0NKLEdBQUcsQ0FBQ0ssTUFBSixDQUFXQyxLQUFYLEdBQW1CLFNBQW5CLEMsQ0FBOEI7O0FBQzlCTixHQUFHLENBQUNLLE1BQUosQ0FBV0UsSUFBWCxHQUFrQixDQUFFO0FBQ2xCO0FBQUVDLEVBQUFBLEVBQUUsRUFBRSxDQUFOO0FBQVNDLEVBQUFBLElBQUksRUFBRSxZQUFmO0FBQTZCQyxFQUFBQSxJQUFJLEVBQUU7QUFBbkMsQ0FEZ0IsRUFFaEI7QUFBRUYsRUFBQUEsRUFBRSxFQUFFLENBQU47QUFBU0MsRUFBQUEsSUFBSSxFQUFFLEtBQWY7QUFBc0JDLEVBQUFBLElBQUksRUFBRTtBQUE1QixDQUZnQixFQUdoQjtBQUFFRixFQUFBQSxFQUFFLEVBQUUsQ0FBTjtBQUFTQyxFQUFBQSxJQUFJLEVBQUUsV0FBZjtBQUE0QkMsRUFBQUEsSUFBSSxFQUFF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SUFBSSxDQUFDNEIsTUFBTCxDQUFZLFVBQUFkLEdBQUc7QUFBQSxXQUFJQSxHQUFHLENBQUNiLEVBQUosS0FBV0EsRUFBZjtBQUFBLEdBQWYsQ0FBdEI7QUFDQVIsRUFBQUEsR0FBRyxDQUFDSyxNQUFKLENBQVdFLElBQVgsR0FBa0IyQixhQUFsQjs7QUFFRSxNQUFJQSxhQUFKLEVBQW1CO0FBQ2pCLFdBQU9sQixRQUFRLENBQUNFLE1BQVQsQ0FBZ0IsR0FBaEIsRUFBcUJMLElBQXJCLENBQTBCO0FBQUVOLE1BQUFBLElBQUksRUFBRTJCO0FBQVIsS0FBMUIsQ0FBUDtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU9sQixRQUFRLENBQUNFLE1BQVQsQ0FBZ0IsR0FBaEIsRUFBcUJMLElBQXJCLENBQTBCLDJCQUExQixDQUFQO0FBQ0Q7QUFDSixDQVhEO0FBYUFiLEdBQUcsQ0FBQ29DLE1BQUosQ0FBV3BDLEdBQUcsQ0FBQ2MsR0FBSixDQUFRLE1BQVIsQ0FBWCxFQUE0QixZQUFNO0FBQ2hDdUIsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLFdBQWV0QyxHQUFHLENBQUNLLE1BQUosQ0FBV0MsS0FBMUIsaUNBQXNETixHQUFHLENBQUNjLEdBQUosQ0FBUSxNQUFSLENBQXREO0FBQ0QsQ0FGRCxFLENBR0E7QUFDQSIsInNvdXJjZVJvb3QiOiIvVXNlcnMva2F0aGVyaW4vRGVza3RvcC9UdXJpbmctUHJvamVjdHMvcGV0LWJveCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuLy8gVGhpcyBub2RlIHZlcnNpb24gaXMgd2hhdCBkaWN0YXRlcyB0aGF0IHRoaXMgbmVlZCAncmVxdWlyZScgc3ludGF4LCBhcyBvcHBvc2VkIHRvIGltcG9ydC9leHBvcnQgdmlhIEJhYmVsXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbmFwcC5zZXQoJ3BvcnQnLCBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDApOyAvL1NldHMgdGhlIHBvcnQgdmFyaWFibGUgdG8gYmUgdXNlZCBsYXRlclxuYXBwLmxvY2Fscy50aXRsZSA9ICdQZXQgQm94JzsgLy8gSnVzdCBnaXZpbmcgYSB0aXRsZSB0byB0aGUgYXBwXG5hcHAubG9jYWxzLnBldHMgPSBbIC8vU3RvcmluZyBkYXRhIGluIGxvY2FsIHZhcmlhYmxlcywgYnV0IG5vdCBnb29kIGZvciBwcm9kdWN0aW9uIGNvZGUhXG4gIHsgaWQ6IDEsIG5hbWU6ICdCdXR0ZXJtaWxrJywgdHlwZTogJ2RvZycgfSxcbiAgeyBpZDogMiwgbmFtZTogJ1VubycsIHR5cGU6ICdjYXQnIH0sXG4gIHsgaWQ6IDMsIG5hbWU6ICdTcGFnaGV0dGknLCB0eXBlOiAnc25ha2UnIH0sXG4gIHsgaWQ6IDQsIG5hbWU6ICdNb3J0JywgdHlwZTogJ21vc3MgYmFsbCcgfVxuXVxuYXBwLnVzZShleHByZXNzLmpzb24oKSk7IC8vTmVjZXNzYXJ5IGZvciBQT1NUaW5nISFcblxuYXBwLmdldCgnLycsIChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xuICByZXR1cm4gcmVzcG9uc2Uuc2VuZCgnT2ghIEhleSB0aGVyZSBQZXQgQm94Li4uIScpO1xufSk7XG5cbmFwcC5nZXQoJy9hcGkvdjEvcGV0cycsIChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xuICBjb25zdCB7IHBldHMgfSA9IGFwcC5sb2NhbHM7XG4gIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHtwZXRzfSk7IC8vU2VuZHMgYSBzdHJpbmdpZmllZCB2ZXJzaW9uIGFuZCB0aGUgMjAwIHRvIHRoZSByZXF1ZXN0aW5nIGNsaWVudFxufSk7XG5cbmFwcC5nZXQoJy9hcGkvdjEvcGV0cy86aWQnLCAocmVxdWVzdCwgcmVzcG9uc2UpID0+IHtcbiAgLy8gcmV0dXJuIHJlc3BvbnNlLnNlbmQoeyAvLyBqdXN0IGdldHRpbmcvcmV0dXJuaW5nIHRoZSBzdHJpbmcgZnJvbSB0aGUgaW5jb21pbmcgcmVxdWVzdFxuICAgIC8vIGlkOiByZXF1ZXN0LnBhcmFtcy5pZFxuICAvLyB9KTsgXG5cbiAgY29uc3QgaWQgPSBwYXJzZUludChyZXF1ZXN0LnBhcmFtcy5pZCk7XG4gIGNvbnN0IHsgcGV0cyB9ID0gYXBwLmxvY2FscztcbiAgY29uc3QgcGV0ID0gcGV0cy5maW5kKHBldCA9PiBwZXQuaWQgPT09IGlkKTtcblxuICBpZiAocGV0KSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDApLmpzb24oeyBwZXQgfSk7IC8vUGVyc29uYWwgcHJlZmVyZW5jZSB0byBhZGQgdGhpcyBvYmplY3QgbGl0ZXJhbCB3L2tleSBvZiBwZXQgb3Igbm90XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MDQpLmpzb24oe2Vycm9yOiAnUGV0IG5vdCBmb3VuZCd9KVxuICB9XG59KTtcblxuYXBwLnBvc3QoJy9hcGkvdjEvcGV0cycsIChyZXF1ZXN0LCByZXNwb25zZSkgPT4geyAvL1NhbWUgQVBJIHRvIHBvc3QgYXMgdG8gZ2V0IGFsbCBwZXRzLCBkdXBsaWNhdGVkIGJ5IGRlc2lnbiEhXG4gIC8vIEdldCB0aGUgaW5mbyBmb3IgdGhlIG5ldyBwZXQgZnJvbSB0aGUgcmVxdWVzdFxuICBjb25zdCB7IHBldHMgfSA9IGFwcC5sb2NhbHM7XG4gIGNvbnN0IG5ld1BldCA9IHJlcXVlc3QuYm9keTtcbiAgLy8gTWFrZSBhIG5ld1BldCBvYmplY3Qgdy9pZCwgbmFtZSwgdHlwZVxuICBjb25zdCBuZXdQZXRXaXRoSWQgPSB7IGlkOiBEYXRlLm5vdygpLCAuLi5uZXdQZXQgfTsgXG4gIC8vIGlmIEkgaGF2ZSBhIG5ldyBwZXQsIHB1c2ggaXQgaW50byB0aGUgZXhpc3RpbmcgYXJyYXlcbiAgLy8gaWYgdGhlcmUgaXMgbm8gbmV3IHBldCwgcmV0dXJuIHNvbWUgc29ydCBvZiBlcnJvclxuICBhcHAubG9jYWxzLnBldHMgPSBbLi4ucGV0cywgbmV3UGV0V2l0aElkXVxuXG4gIGlmIChuZXdQZXQpIHsgLy9DaGVja2luZyBmb3IgdGhlIGluY29taW5nIHBldCwgYmVjYXVzZSBuZXdQZXRXaXRoSWQgd2lsbCBhbHdheXMgYmUgYW4gb2JqZWN0XG4gICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDEpLmpzb24oeyBpZDogbmV3UGV0V2l0aElkLmlkIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDIyKS5qc29uKCdDb3VsZCBub3QgcGFyc2UgcGV0JykgLy80MjIgPSBcInVucHJvY2Vzc2FibGUgZW50aXR5XCJcbiAgfVxuICAvLyByZXR1cm4gc3RhdHVzIGNvZGUsIG1heWJlIGFsbCB0aGUgcGV0cyB0b29cbn0pO1xuXG4vL3VwZGF0ZSBhIHBldCdzIGluZm9cbi8vYXBwLnB1dFxuLy9yZWNlaXZlIHRoZSB1cGRhdGVkIGluZm9cbi8vbG9vayBmb3IgdGhlIG1hdGNoaW5nIGlkJ3Mgb2JqZWN0XG4vL292ZXJ3cml0ZSB0aGUgb2xkIG9iamVjdCBpbmZvIGJ5IGtleVxuLy91c2UgY29uZGl0aW9uYWwgdG8gc2VlIHdoYXQgc3RhdHVzIGNvZGUgdG8gcmV0dXJuIHcvbWVzc2FnZVxuXG5hcHAucHV0KCcvYXBpL3YxL3BldHMvOmlkJywgKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHsgcGV0cyB9ID0gYXBwLmxvY2FscztcbiAgY29uc3QgaWQgPSBwYXJzZUludChyZXF1ZXN0LnBhcmFtcy5pZCk7XG4gIGNvbnN0IHBldFRvVXBkYXRlID0gcGV0cy5maW5kKHBldCA9PiBwZXQuaWQgPT09IGlkKTtcbiAgcGV0VG9VcGRhdGUubmFtZSA9IHJlcXVlc3QuYm9keS5uYW1lO1xuICBjb25zdCB1cGRhdGVkUGV0cyA9IHBldHMubWFwKHBldCA9PiB7XG4gICAgcmV0dXJuIHBldC5pZCA9PT0gaWQgPyBwZXRUb1VwZGF0ZSA6IHBldCA7XG4gIH0pO1xuXG4gIGlmIChwZXRUb1VwZGF0ZSkge1xuICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAyKS5qc29uKHsgcGV0czogdXBkYXRlZFBldHMgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MjIpLmpzb24oXCJDb3VsZCBub3QgdXBkYXRlIHBldFwiKTtcbiAgfVxufSk7XG5cbmFwcC5kZWxldGUoJy9hcGkvdjEvcGV0cy86aWQnLCAocmVxdWVzdCwgcmVzcG9uc2UpID0+IHtcbiAgY29uc3QgeyBwZXRzIH0gPSBhcHAubG9jYWxzO1xuICBjb25zdCBpZCA9IHBhcnNlSW50KHJlcXVlc3QucGFyYW1zLmlkKTtcbiAgY29uc3QgcmVtYWluaW5nUGV0cyA9IHBldHMuZmlsdGVyKHBldCA9PiBwZXQuaWQgIT09IGlkKTtcbiAgYXBwLmxvY2Fscy5wZXRzID0gcmVtYWluaW5nUGV0cztcblxuICAgIGlmIChyZW1haW5pbmdQZXRzKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbih7IHBldHM6IHJlbWFpbmluZ1BldHMgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDIyKS5qc29uKFwiQ291bGQgbm90IGRlbGV0ZSB0aGF0IHBldFwiKTtcbiAgICB9XG59KTtcblxuYXBwLmxpc3RlbihhcHAuZ2V0KCdwb3J0JyksICgpID0+IHsgXG4gIGNvbnNvbGUubG9nKGAke2FwcC5sb2NhbHMudGl0bGV9IGlzIHJ1bm5pbmcgb24gUE9SVCAke2FwcC5nZXQoJ3BvcnQnKX1gKTtcbn0pO1xuLy8gQXBwLmxpc3RlbiBpcyBhIG1ldGhvZCBjb21pbmcgZnJvbSBleHByZXNzXG4vLyBJdCBtZWFucyB0aGUgc2VydmVyIHdpbGwgYmUgbGlzdGVuaW5nIGZvciBIVFRQIGNhbGxzIG9uIHRoYXQgcG9ydCJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "set",
        "process",
        "env",
        "PORT",
        "locals",
        "title",
        "pets",
        "id",
        "name",
        "type",
        "use",
        "express",
        "json",
        "get",
        "request",
        "response",
        "send",
        "status",
        "parseInt",
        "params",
        "pet",
        "find",
        "error",
        "post",
        "newPet",
        "body",
        "newPetWithId",
        "Date",
        "now",
        "put",
        "petToUpdate",
        "updatedPets",
        "map",
        "remainingPets",
        "filter",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/katherin/Desktop/Turing-Projects/pet-box",
      "sourcesContent": [
        "import express from 'express';\n// This node version is what dictates that this need 'require' syntax, as opposed to import/export via Babel\nconst app = express();\n\napp.set('port', process.env.PORT || 3000); //Sets the port variable to be used later\napp.locals.title = 'Pet Box'; // Just giving a title to the app\napp.locals.pets = [ //Storing data in local variables, but not good for production code!\n  { id: 1, name: 'Buttermilk', type: 'dog' },\n  { id: 2, name: 'Uno', type: 'cat' },\n  { id: 3, name: 'Spaghetti', type: 'snake' },\n  { id: 4, name: 'Mort', type: 'moss ball' }\n]\napp.use(express.json()); //Necessary for POSTing!!\n\napp.get('/', (request, response) => {\n  return response.send('Oh! Hey there Pet Box...!');\n});\n\napp.get('/api/v1/pets', (request, response) => {\n  const { pets } = app.locals;\n  return response.status(200).json({pets}); //Sends a stringified version and the 200 to the requesting client\n});\n\napp.get('/api/v1/pets/:id', (request, response) => {\n  // return response.send({ // just getting/returning the string from the incoming request\n    // id: request.params.id\n  // }); \n\n  const id = parseInt(request.params.id);\n  const { pets } = app.locals;\n  const pet = pets.find(pet => pet.id === id);\n\n  if (pet) {\n    return response.status(200).json({ pet }); //Personal preference to add this object literal w/key of pet or not\n  } else {\n    return response.status(404).json({error: 'Pet not found'})\n  }\n});\n\napp.post('/api/v1/pets', (request, response) => { //Same API to post as to get all pets, duplicated by design!!\n  // Get the info for the new pet from the request\n  const { pets } = app.locals;\n  const newPet = request.body;\n  // Make a newPet object w/id, name, type\n  const newPetWithId = { id: Date.now(), ...newPet }; \n  // if I have a new pet, push it into the existing array\n  // if there is no new pet, return some sort of error\n  app.locals.pets = [...pets, newPetWithId]\n\n  if (newPet) { //Checking for the incoming pet, because newPetWithId will always be an object\n    return response.status(201).json({ id: newPetWithId.id });\n  } else {\n    return response.status(422).json('Could not parse pet') //422 = \"unprocessable entity\"\n  }\n  // return status code, maybe all the pets too\n});\n\n//update a pet's info\n//app.put\n//receive the updated info\n//look for the matching id's object\n//overwrite the old object info by key\n//use conditional to see what status code to return w/message\n\napp.put('/api/v1/pets/:id', (request, response) => {\n  const { pets } = app.locals;\n  const id = parseInt(request.params.id);\n  const petToUpdate = pets.find(pet => pet.id === id);\n  petToUpdate.name = request.body.name;\n  const updatedPets = pets.map(pet => {\n    return pet.id === id ? petToUpdate : pet ;\n  });\n\n  if (petToUpdate) {\n    return response.status(202).json({ pets: updatedPets });\n  } else {\n    return response.status(422).json(\"Could not update pet\");\n  }\n});\n\napp.delete('/api/v1/pets/:id', (request, response) => {\n  const { pets } = app.locals;\n  const id = parseInt(request.params.id);\n  const remainingPets = pets.filter(pet => pet.id !== id);\n  app.locals.pets = remainingPets;\n\n    if (remainingPets) {\n      return response.status(200).json({ pets: remainingPets });\n    } else {\n      return response.status(422).json(\"Could not delete that pet\");\n    }\n});\n\napp.listen(app.get('port'), () => { \n  console.log(`${app.locals.title} is running on PORT ${app.get('port')}`);\n});\n// App.listen is a method coming from express\n// It means the server will be listening for HTTP calls on that port"
      ]
    },
    "sourceType": "script",
    "mtime": 1569880888351
  }
}